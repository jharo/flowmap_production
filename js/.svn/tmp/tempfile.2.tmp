/**
 * @author Administrator
 */

function myMapBtnCtrl(btnCtrlOpts)
{
	var controlDiv = document.createElement('div');
	//some default style settings for the button in case no css is attached
	controlDiv.style.width = 'auto';
	controlDiv.style.minWidth = '20px';
	controlDiv.style.minHeight = '20px';
	controlDiv.style.paddingTop = '2px';
	controlDiv.style.paddingLeft = '2px';
	controlDiv.style.paddingRight = '2px';
	controlDiv.style.paddingBottom = '2px';
	controlDiv.style.cursor = 'hand';
	controlDiv.style.cursor = 'pointer';
	controlDiv.style.backgroundColor = '#ffffff';
	controlDiv.className = btnCtrlOpts.buttonCss;

	//we now create a div for the label
	var labelDiv = document.createElement('div');
	//set the label
	labelDiv.innerHTML = btnCtrlOpts.buttonLabel;
	//this centers the label div at all times;
	labelDiv.style.marginTop = '0';
	labelDiv.style.marginRight = 'auto';
	labelDiv.style.width = 'auto';
	labelDiv.style.height = 'auto';
	//add the div to the controlDiv
	controlDiv.appendChild(labelDiv);

	controlDiv.index = 1;
	//add the contro l to the map
	btnCtrlOpts.gmap.controls[btnCtrlOpts.position].push(controlDiv);
	//add an action to the button control when it is clicked
	google.maps.event.addDomListener(controlDiv, 'click', btnCtrlOpts.action);

	//return the finished controlDiv
	return controlDiv;
}

//this creates a menuObject
function myMapMenuCntrl(opts)
{
	//lets start by creating a div for the menu that will be added to the dom
	var menuDiv = document.createElement('div');
	//IMPORTANT!!! - this menu list is setup using css so the id must be set - or you can use a class if you want, but the css is the actual script giving functionality....see the main.css sheet to see how it works
	menuDiv.id='cssmenu';

	
	//create an un-order list for the menu
	var menuList = document.createElement('ul');

	//this list can be an opts object parameter that gets passed from the calling function or script, for now i just built it in into the object
	var mi = [
	{
		l : 'Map Type',
		children : [
		{
			label : 'Default Map',
			index : 0
		},
		{
			label : 'Satellite',
			index : 1
		},
		{
			label : 'Custom Map',
			index : 2
		}]
	},
	{
		l : 'Map Layers',
		children : [
		{
			label : 'Cameras',
			index : 0
		},
		{
			label : 'map layer 2',
			index : 1
		},
		{
			label : 'map layer 3',
			index : 2
		}]
	},
	{
		l : 'Map Legend',
		children : [
		{
			label : 'On',
			index : 0
		},
		{
			label : 'Off',
			index : 1
		}]
	}];
	

	//now we traverse through the menu items obejct and create the lists.
	//this first loop adds the top level menu nodes -  i called them the parent nodes
	for(var k=0; k<mi.length;k++)
	{
		//i create a var to hold the toplevel node elements
		var menuItem = mi[k];
		//console.log("trace from object: "+menuItem.l); //just a trace for testing, you can delete if you want
		
		//if the menu has a label (l) then we create it in the dom
		if (menuItem.l != null)
		{
			
			//the dom elements that create the top level items	
			var parentNode = document.createElement('li');
			var anchortag = document.createElement('a');
			var pns = document.createElement('span');
			
			//attribute to set to the anchor tag
			anchortag.setAttribute('href','#');
			//set the label of the button level items to the span tag we created above
			pns.innerHTML = menuItem.l;
			
			
			//add the span element to the anchor element and the anchor to the list item parent node
			parentNode.appendChild(anchortag);
			anchortag.appendChild(pns);
			menuList.appendChild(parentNode);
			

			//we now check if the top level menu item has childre - this paramenter will come from the array object we are using to create the menubar
			//if it has children, then begin creating the subchildren elements
			if (menuItem.children != null || menuItem.children != 0)
			{
				//console.log('children: '+menuItem.children.length); //trace for testing, you can delete if you want
				//set the class from the css that tells the node that there are other items below it
				parentNode.className = 'has-sub';
				//create a var for the children array of the parent node
				var menuChildren = menuItem.children;
				//setup another un-oredered list for the children and added it to the top level menu item dom element
				var childrenList = document.createElement('ul');
				parentNode.appendChild(childrenList);

				//traverse through the children since the array is not empty. this is similar to what i did for the parent elements. in order to make it a bit faster in the future
				//, i will try to make this function recursive
				for (var mc=0; mc < menuChildren.length; mc++)
				{
					//create a var to hold the current child
					var child = menuChildren[mc];
					//console.log('child label: '+child.label); //trace for testing, you can delete it if you want
					
					//create a set of dom elements for the children
					var childNode = document.createElement('li');
					var childanchortag = document.createElement('a');
					var childNodeSpan = document.createElement('span');
					
					//set attributes and the label for each child
					childanchortag.setAttribute('href','#');
					childNodeSpan.innerHTML = child.label;
					//append the elements to each other
					childanchortag.appendChild(childNodeSpan);
					childNode.appendChild(childanchortag);
					
					//add a click event listener to the child item node
					childNodeSpan.onclick = menuItemClick;
					
					
					//now, if we reach the last element we must assign a css class to it in order to end the list
					if (mc == (menuChildren.length-1))
					{
						childNode.className = 'last';
					}
					//finally append the child to the unordered element list
					childrenList.appendChild(childNode);
				}
				
				//add the unordered element list of children to the parent node (the top level menu element)
				parentNode.appendChild(childrenList);
			}
			
			//again, check to see if this is the last element in the main unordered list and set the css class to it
			if(k==(mi.length-1))
			{
				parentNode.className = 'last';
			}
			
		}
		
	}
	//finally, add the list of object to the main div and set the main div on the map according to the passed parement list
	menuDiv.appendChild(menuList);
	menuDiv.style.margin='10px 10px 10px 10px';
	opts.gmap.controls[opts.position].push(menuDiv);

}

var menuItemClick = function onitemclick(e)
{
	e.preventDefault();
	e.stopPropagation();
	console.log(e.target.innerHTML);
	switch(e.target.innerHTML) {
		
		case 'Cameras':
			if (markerCluster)
			{
				markerCluster.clearMarkers();
				console.log(myCameraMarkers.length);
				markerCluster = null;
			}
			else
			{
				markerCluster = new MarkerClusterer(map, myCameraMarkers,
				{
					styles : cctvClusterStyle
				});
			}

			break;
			case 'Default Map':
			console.log('default map');
			map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
			break;
			case 'Satellite':
			map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
			break;
			case 'Custom Map':
			map.setMapTypeId('map_style');
			break;
		default:
			alert(e.target.innerHTML);
	}
};


function mapDesclaimer(mapDesclaimerControlOpts)
{
	var dDiv = document.createElement('div');
	var dWrapper = document.createElement('div');
	var dContents = document.createElement('div');
	var dTextMessage = document.createElement('span');
	var dDateTime = document.createElement('span');
	

	dTextMessage.innerHTML = mapDesclaimerControlOpts.message;
	dDateTime.id = 'disclaimerDateTime';
	dDateTime.innerHTML = moment().format('MMMM Do YYYY, h:mm:ss a');
	
	dContents.appendChild(dTextMessage);
	dContents.appendChild(dDateTime);
	dWrapper.appendChild(dContents);
	dDiv.appendChild(dWrapper);
	
	dDiv.className = 'disclaimer';
	dTextMessage.className = 'disclaimerMsg';
	dDateTime.className = 'disclaimerDateTime';
	
	mapDesclaimerControlOpts.gmap.controls[mapDesclaimerControlOpts.position].push(dDiv);
}



function mapLegend(lOpts)
{
	var lDiv = document.createElement('div');
	var lWrapper = document.createElement('div');
	var lHeader = document.createElement('div');
	var lContents =document.createElement('div');
	var lTitle = document.createElement('span');
	
	//you will obtain the contents of the legend from an array  of objects
	//the format for the object array is below
	//
	var legendContentItems = 
	[
	{itemName:'light',itemColor:'green', tt:'this is item1'},
	{itemName:'moderate',itemColor:'yellow',tt:'this is item2'},
	{itemName:'moderate-heavy',itemColor:'orange',tt:'this is item3'},
	{itemName:'heavy',itemColor:'red',tt:''},
	{itemName:'not enough sightings',itemColor:'blue',tt:'there were not enough detector sightings to provide a confident travel time'},
	{itemName:'no data',itemColor:'#444444',tt:'this is item6'},
	];
	//var legendContentItems = lOpts.legendItems;
	
	lTitle.innerHTML = lOpts.legendTitle;

	lHeader.className = 'legendHeader';
	lHeader.appendChild(lTitle);
	
	lWrapper.appendChild(lHeader);
	
	
	
	//lets create a list for the legend items
	var legendList = document.createElement('ul');
	legendList.className = 'legendList';

	

	
	for(var x = 0; x < legendContentItems.length; x++)
	{
		//let create a temp object to hold each of the legend items in the array
		var lo = legendContentItems[x];
		//create a list item to append to the legendList
		var listItem = document.createElement('li');
<<<<<<< .mine
=======
		//listItem.style.border = '1px dotted red';
>>>>>>> .r9
		listItem.style.display='inline-block';
		listItem.style.padding = '0';
		if(x==legendContentItems.length-1)
		{
			listItem.style.margin = '0';
		}
		else{
			listItem.style.margin = '0 2px 0 0';
		}
		//set a tootltip for the list item
		if(lo.tt!=null || lo.tt!="")
		{
			listItem.title = lo.tt;
		}else
		{
			listItem.title = lo.itemName;
		}
		//create a div for the color box
		var colorBox = document.createElement('div');
		//add some css to the box
		colorBox.className = 'legendColorBox';
		colorBox.style.backgroundColor = lo.itemColor; //we'll get the color from the code above
		listItem.appendChild(colorBox); //add the div to the list item tag
		
		var labelTxt = document.createElement('div');//crate a div for the label for each of the items 
		//add some styling
		labelTxt.style.display = 'inline-block';
		labelTxt.style.verticalAlign = 'middle';
		labelTxt.style.color = '#ffffff';
		labelTxt.innerHTML = lo.itemName;
		labelTxt.className = 'noTxtSelect';
		//add the label div to the list item tag
		listItem.appendChild(labelTxt);
		
		//once evreything is created and set add the legend item to the list
		legendList.appendChild(listItem);
		
	}
	
	
	
	lContents.appendChild(legendList);
	lWrapper.appendChild(lContents);
	lDiv.appendChild(lWrapper);
	
	lDiv.className = 'legend';
	lOpts.gmap.controls[lOpts.position].push(lDiv);
}
//some sample data for the chart. you can delete this when the live data is online

	var chartData = [
	{
		date : new Date(2011, 5, 1, 0, 0, 0, 0),
		val : 10
	},
	{
		date : new Date(2011, 5, 2, 0, 0, 0, 0),
		val : 11
	},
	{
		date : new Date(2011, 5, 3, 0, 0, 0, 0),
		val : 12
	},
	{
		date : new Date(2011, 5, 4, 0, 0, 0, 0),
		val : 11
	},
	{
		date : new Date(2011, 5, 5, 0, 0, 0, 0),
		val : 10
	},
	{
		date : new Date(2011, 5, 6, 0, 0, 0, 0),
		val : 11
	},
	{
		date : new Date(2011, 5, 7, 0, 0, 0, 0),
		val : 13
	},
	{
		date : new Date(2011, 5, 8, 0, 0, 0, 0),
		val : 14
	},
	{
		date : new Date(2011, 5, 9, 0, 0, 0, 0),
		val : 17
	},
	{
		date : new Date(2011, 5, 10, 0, 0, 0, 0),
		val : 13
	}]; 

var chart = new AmCharts.AmStockChart();
var dataSet = new AmCharts.DataSet(); //this is where we are going to store our data. it's a global obejct to be used anyone in the script

function PolylineInfoWindowControl(opts)
{
	var wrapper = document.createElement('div');
	wrapper.id = 'chart';
	wrapper.className = 'chartWrapper';
	
	var header = document.createElement('div');
	header.id = 'chartHeader';
	header.className = 'chartHeader';
	
	var contents = document.createElement('div');
	contents.id = 'chartContents';
	contents.className = 'chartContents';
	
	//start creatign the chart--------------------//
	
	chart.pathToImages = "img/images/";
	
	//we define the dataset that the chart is going to show
	dataSet.dataProvider = chartData;
	dataSet.fieldMappings = [{fromField:"val", toField:"value"}];
	dataSet.categoryField = "date"; //this is where you tell the chart the field name of the data we obtain
	dataSet.title = "This is my dataset title";
	dataSet.color = "#ff0000";
	
	//we pass an array of datasets to the chart
	chart.dataSets = [dataSet];
	
	//the pannels
	var stockPanel = new AmCharts.StockPanel();
	chart.panels = [stockPanel];
	var panelsSettings = new AmCharts.PanelsSettings();
	panelsSettings.startDuration = 1;
	chart.panelsSettings = panelsSettings;
	
	//create a graph for the panel above
	var graph = new AmCharts.StockGraph();
	graph.valueField = "value";
	graph.type = "column";
	graph.fillAlphas = 1;
	graph.title = "this is my graph title";
	
	//add the graph to the panel
	stockPanel.addStockGraph(graph);
	
	//add the chart to the holder div: - i've added this line to the event listener callback for the get live data button since the holder div needed to be created on the stage first before writing
	
	
	
	//below are the items neccessaryt o create the footer content
	var footer = document.createElement('div');
	footer.className = 'chartFooter';

	
	var historicalDataForm = document.createElement('div');
	historicalDataForm.className = 'chartFooterSection';
	
	var startDateLabel = document.createElement('label');
	startDateLabel.innerHTML = 'Start Date & Time:';
	startDateLabel.for = 'startDate';
	startDateLabel.className = 'formLabels';
	
	var startDateDateInput = document.createElement('input');
	startDateDateInput.id = 'startDate';
	startDateDateInput.type = 'date';
	var startDateTimeInput = document.createElement('input');
	startDateTimeInput.id = 'startTime';
	startDateTimeInput.type = 'time';
	var endDateLabel = document.createElement('label');
	endDateLabel.innerHTML = 'End Date & Time:';
	endDateLabel.className = 'formLabels';
	endDateLabel.for = 'endDate';
	var endDateDateInput = document.createElement('input');
	endDateDateInput.id = 'endDate';
	endDateDateInput.type = 'date';
	var endDateTimeInput = document.createElement('input');
	endDateTimeInput.id = 'endTime';
	endDateTimeInput.type = 'time';
	
	///variables used in case the input[type=date or time] is not supported
	var startDateTimePika;
	var endDateTimePika;
	//check to see if the input types are supported using Modernizr
	if(!Modernizr.inputtypes.date)
	{
		console.log('date input type not supported..lets use a custom element');
		//since the Pikaday object will get us time, we will set the visibility of the startDateTime element to invisible;
		startDateTimeInput.style.visibility = 'hidden';
		endDateTimeInput.style.visibility = 'hidden';
		startDateTimePika = new Pikaday({field:startDateDateInput, firstDay:1, minDate:new Date('2000-01-01'),maxDate:new Date('2099-12-31'),yearRange:[2000,2099], showTime:true, use24hour:false});
		endDateTimePika = new Pikaday({field:startDateDateInput, firstDay:1, minDate:new Date('2000-01-01'),maxDate:new Date('2099-12-31'),yearRange:[2000,2099], showTime:true, use24hour:false});
	}
	
	
	
	var getHistoricalInfoDataBtn = document.createElement('input');
	getHistoricalInfoDataBtn.type = 'button';
	getHistoricalInfoDataBtn.id = 'getHistoricalData';
	getHistoricalInfoDataBtn.className = 'myBtn';
	getHistoricalInfoDataBtn.value = 'Get Data';	
	var historicalDataFormTitle = document.createElement('span');
	historicalDataFormTitle.className = 'chartFooterSectionTitle';
	historicalDataFormTitle.innerHTML = "Historical Information";
	historicalDataForm.appendChild(historicalDataFormTitle);
	historicalDataForm.appendChild(startDateLabel);
	historicalDataForm.appendChild(startDateDateInput);
	historicalDataForm.appendChild(startDateTimeInput);
	historicalDataForm.appendChild(document.createElement('br'));
	historicalDataForm.appendChild(endDateLabel);
	historicalDataForm.appendChild(endDateDateInput);
	historicalDataForm.appendChild(endDateTimeInput);
	historicalDataForm.appendChild(document.createElement('br'));
	historicalDataForm.appendChild(getHistoricalInfoDataBtn);
	
	
	var liveDataForm = document.createElement('div');
	var cancelDataForm = document.createElement('div');
	
	liveDataForm.className = 'chartFooterSection';
	cancelDataForm.className = 'chartFooterSection';
	
	liveDataForm.style.height = '85%';
	cancelDataForm.style.height = '85%';

	
	
	var liveDataBtn = document.createElement('input');
	liveDataBtn.type = 'button';
	liveDataBtn.value = 'Get Live Data';
	liveDataBtn.style.width = '100%';
	liveDataBtn.style.height = '100%';
	liveDataBtn.style.marginTop='0';
	liveDataBtn.addEventListener("click",function(){
		chart.write("chartContents");
	});
	
	var cancelDataBtn = document.createElement('input');
	cancelDataBtn.type = 'button';
	cancelDataBtn.value = 'Clear Data';
	cancelDataBtn.style.width = '100%';
	cancelDataBtn.style.height = '100%';
	cancelDataBtn.style.marginTop='0';
	
	liveDataForm.appendChild(liveDataBtn);
	cancelDataForm.appendChild(cancelDataBtn);
	
	footer.appendChild(historicalDataForm);
	footer.appendChild(liveDataForm);
	footer.appendChild(cancelDataForm);
	
	
	
	
	
	
	//add the title
	var title = document.createElement('div');
	title.innerHTML = opts.linkName;
	title.style.width = '100%';
	title.style.color = '#444';
	title.style.textAlign = 'left';
	header.appendChild(title);
	
	
	wrapper.appendChild(header);
	wrapper.appendChild(contents);
	wrapper.appendChild(document.createElement('hr'));
	wrapper.appendChild(footer);
	return wrapper;
	
}

